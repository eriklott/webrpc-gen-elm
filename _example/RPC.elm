module RPC exposing (..)

{- 
    Test v0.10.0 b6c0933ffd84ecb5da52937d3620a79abd18295c
    --
    Code generated by webrpc-gen@v0.11.0 with custom generator. DO NOT EDIT.
    webrpc-gen -schema=test.ridl -target=../ -pkg=RPC -client -out=./RPC.elm
-}

import Http
import Json.Decode as Decode exposing (Decoder, Value)
import Json.Encode as Encode
import Time exposing (Posix)
import Bytes exposing (Bytes)



webRpcVersion : String
webRpcVersion =
    "v1"


webRpcSchemaVersion : String
webRpcSchemaVersion =
    "v0.10.0"


webRpcSchemaHash : String
webRpcSchemaHash =
    "b6c0933ffd84ecb5da52937d3620a79abd18295c"


-- TYPES


type Status
    = StatusAVAILABLE
    | StatusNOT_AVAILABLE

type EnvironmentCheck
    = EnvironmentCheckProduction
    | EnvironmentCheckDevelopment

type alias Simple =
    { id : Int 
    , name : String 
    }

type alias User =
    { id : Int 
    , username : String 
    , role : String 
    }

type alias Complex =
    { meta : Dict String Value 
    , metaNestedExample : Dict String (Dict String Int) 
    , namesList : List String 
    , numsList : List Int 
    , doubleArray : List (List String) 
    , listOfMaps : List (Dict String Int) 
    , listOfUsers : List User 
    , mapOfUsers : Dict String User 
    , user : User 
    , enum : Status 
    , createdAt : Posix 
    , isActive : Bool 
    , metaOpt : Maybe (Dict String Value) 
    , metaNestedExampleOpt : Maybe (Dict String (Dict String Int)) 
    , namesListOpt : Maybe (List String) 
    , numsListOpt : Maybe (List Int) 
    , doubleArrayOpt : Maybe (List (List String)) 
    , listOfMapsOpt : Maybe (List (Dict String Int)) 
    , listOfUsersOpt : Maybe (List User) 
    , mapOfUsersOpt : Maybe (Dict String User) 
    , userOpt : Maybe User 
    , enumOpt : Maybe Status 
    , createdAtOpt : Maybe Posix 
    , isActiveOpt : Maybe Bool 
    }


-- DECODERS


statusDecoder : Decoder Status
statusDecoder =
    let
        enumDecoder : String -> Decoder Status
        enumDecoder str =
            case str of
                "AVAILABLE" -> 
                    Decode.succeed StatusAVAILABLE
                "NOT_AVAILABLE" -> 
                    Decode.succeed StatusNOT_AVAILABLE
                _ -> 
                    Decode.fail ("unknown value for type Status: " ++ str)
    in
    Decode.string |> Decode.andThen enumDecoder   


environmentCheckDecoder : Decoder EnvironmentCheck
environmentCheckDecoder =
    let
        enumDecoder : String -> Decoder EnvironmentCheck
        enumDecoder str =
            case str of
                "Production" -> 
                    Decode.succeed EnvironmentCheckProduction
                "Development" -> 
                    Decode.succeed EnvironmentCheckDevelopment
                _ -> 
                    Decode.fail ("unknown value for type EnvironmentCheck: " ++ str)
    in
    Decode.string |> Decode.andThen enumDecoder   


simpleDecoder : Decoder Simple
simpleDecoder =
    Decode.succeed Simple
        |> andMap (Decode.field "id" Decode.int)
        |> andMap (Decode.field "name" Decode.string)

userDecoder : Decoder User
userDecoder =
    Decode.succeed User
        |> andMap (Decode.field "id" Decode.int)
        |> andMap (Decode.field "username" Decode.string)
        |> andMap (Decode.field "role" Decode.string)

complexDecoder : Decoder Complex
complexDecoder =
    Decode.succeed Complex
        |> andMap (Decode.field "meta" (Decode.dict Decode.value))
        |> andMap (Decode.field "metaNestedExample" (Decode.dict (Decode.dict Decode.int)))
        |> andMap (Decode.field "namesList" (Decode.list Decode.string))
        |> andMap (Decode.field "numsList" (Decode.list Decode.int))
        |> andMap (Decode.field "doubleArray" (Decode.list (Decode.list Decode.string)))
        |> andMap (Decode.field "listOfMaps" (Decode.list (Decode.dict Decode.int)))
        |> andMap (Decode.field "listOfUsers" (Decode.list userDecoder))
        |> andMap (Decode.field "mapOfUsers" (Decode.dict userDecoder))
        |> andMap (Decode.field "user" userDecoder)
        |> andMap (Decode.field "enum" statusDecoder)
        |> andMap (Decode.field "createdAt" Decode.posix)
        |> andMap (Decode.field "isActive" Decode.bool)
        |> andMap (decodeOptionalField "metaOpt" (Decode.dict Decode.value))
        |> andMap (decodeOptionalField "metaNestedExampleOpt" (Decode.dict (Decode.dict Decode.int)))
        |> andMap (decodeOptionalField "namesListOpt" (Decode.list Decode.string))
        |> andMap (decodeOptionalField "numsListOpt" (Decode.list Decode.int))
        |> andMap (decodeOptionalField "doubleArrayOpt" (Decode.list (Decode.list Decode.string)))
        |> andMap (decodeOptionalField "listOfMapsOpt" (Decode.list (Decode.dict Decode.int)))
        |> andMap (decodeOptionalField "listOfUsersOpt" (Decode.list userDecoder))
        |> andMap (decodeOptionalField "mapOfUsersOpt" (Decode.dict userDecoder))
        |> andMap (decodeOptionalField "userOpt" userDecoder)
        |> andMap (decodeOptionalField "enumOpt" statusDecoder)
        |> andMap (decodeOptionalField "createdAtOpt" Decode.posix)
        |> andMap (decodeOptionalField "isActiveOpt" Decode.bool)

-- CLIENT

testApiGetEmpty : () -> (Result () Http.Error -> msg) -> Cmd msg
testApiGetEmpty _ =
    let
    in

testApiGetError : () -> (Result () Http.Error -> msg) -> Cmd msg
testApiGetError _ =
    let
    in

testApiGetOne : () -> (Result Simple Http.Error -> msg) -> Cmd msg
testApiGetOne _ =
    let
    in

testApiSendOne : Simple -> (Result () Http.Error -> msg) -> Cmd msg
testApiSendOne one =
    let
    in

testApiGetList : () -> (Result (List Int) Http.Error -> msg) -> Cmd msg
testApiGetList _ =
    let
    in

testApiGetMulti : () -> (Result { one : Simple, two : Simple, three : Maybe (List Simple), four : List Int } Http.Error -> msg) -> Cmd msg
testApiGetMulti _ =
    let
    in

testApiSendMulti : Simple -> Simple -> Maybe Simple -> (Result () Http.Error -> msg) -> Cmd msg
testApiSendMulti one two three =
    let
    in

testApiGetComplex : () -> (Result Complex Http.Error -> msg) -> Cmd msg
testApiGetComplex _ =
    let
    in

testApiSendComplex : Complex -> (Result () Http.Error -> msg) -> Cmd msg
testApiSendComplex complex =
    let
    in

testApiGetSchemaError : Int -> (Result () Http.Error -> msg) -> Cmd msg
testApiGetSchemaError code =
    let
    in


-- HELPERS


andMap : Decoder a -> Decoder (a -> b) -> Decoder b
andMap =
    Decode.map2 (|>)
        
        
decodeOptionalField : String -> Decoder a -> Decoder (Maybe a)
decodeOptionalField fieldName decoder =
    let
        finishDecoding json =
            case Decode.decodeValue (Decode.field fieldName Decode.value) json of
                Ok val ->
                    Decode.map Just (Decode.field fieldName decoder)

                Err _ ->
                    Decode.succeed Nothing
    in
    Decode.oneOf
        [ Decode.field fieldName (Decode.null Nothing)
        , Decode.value |> Decode.andThen finishDecoding
        ]