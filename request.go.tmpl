{{- define "request" -}}

{{- $opts := .Opts -}}

-- REQUEST


type Request a =
    Request
        { url: String
        , decoder : Decoder a
        , encoder : Encode.Value
        , baseUrl : String
        , headers : List Http.Header
        , withCredentials : Bool
        , tracker : Maybe String
        , timeout : Maybe Float
        }


request : {url: String, decoder : Decoder a, encoder : Encode.Value} -> Request a
request { url, decoder, encoder } =
    Request
        { url = url
        , decoder = decoder
        , encoder = encoder
        , baseUrl = "{{$opts.baseurl}}"
        , headers = []
        , withCredentials = {{ if $opts.credentials }}True{{else}}False{{end}}
        , timeout = {{ if $opts.timeout }}Just {{ $opts.timeout }}{{ else }}Nothing{{ end }}
        , tracker = Nothing
        }


withBaseUrl : String -> Request a -> Request a
withBaseUrl baseUrl (Request req) =
    Request { req | baseUrl = baseUrl }


withCredentials : Bool -> Request a -> Request a
withCredentials withCreds (Request req) =
    Request { req | withCredentials = withCreds }


withHeaders : List Http.Header -> Request a -> Request a
withHeaders headers (Request req) =
    Request { req | headers = headers }


withTimeout : Maybe Float -> Request a -> Request a
withTimeout timeout (Request req) =
    Request { req | timeout = timeout }


withTracker : Maybe String -> Request a -> Request a
withTracker tracker (Request req) =
    Request { req | tracker = tracker }


send : (Result Error a -> msg) -> Request a -> Cmd msg
send toMsg (Request req)  =
    let
        headers =
            req.headers

        url =
            req.baseUrl ++ req.url

        body =
            req.encoder

        decoder =
            req.decoder

        timeout =
            req.timeout

        tracker =
            req.tracker

        httpRequest =
            if req.withCredentials then
                Http.riskyRequest

            else
                Http.request
    in
    httpRequest
        { method = "POST"
        , headers = headers
        , url = url
        , body = Http.jsonBody body
        , expect = expectJson toMsg decoder
        , timeout = timeout
        , tracker = tracker
        }


task : Request a -> Task Error a
task (Request req) =
    let
        headers =
            req.headers

        url =
            req.baseUrl ++ req.url

        body =
            req.encoder

        decoder =
            req.decoder

        timeout =
            req.timeout

        httpTask =
            if req.withCredentials then
                Http.riskyTask

            else
                Http.task
    in
    httpTask
        { method = "POST"
        , headers = headers
        , url = url
        , body = Http.jsonBody body
        , resolver = jsonResolver decoder
        , timeout = timeout
        }


{{ end }}
