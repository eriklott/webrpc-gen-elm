{{- define "client" -}}

{{- $typeMap := .TypeMap -}}
{{- if .Services -}}

-- CLIENT

{{ range $service := .Services -}}

{{ range $method := .Methods -}}
{{$service.Name | camelCase}}{{$method.Name}} : {{""}}

{{- if $method.Inputs -}}
    {{- range $i, $input := $method.Inputs }}{{template "type" dict "Type" $input.Type "Optional" $input.Optional "TypeMap" $typeMap}} -> {{ end }}
{{- end -}}

{{- if eq (len $method.Outputs) 0 -}}
    (Result Http.Error () -> msg)
{{- else if eq (len $method.Outputs) 1 -}}
    (Result Http.Error {{ range .Outputs }}{{template "type" dict "Type" .Type "Optional" .Optional "TypeMap" $typeMap "Nested" true}}{{ end }} -> msg)
{{- else if gt (len $method.Outputs) 1 -}}
    (Result Http.Error { {{ range $i, $_ := .Outputs }}{{if $i}}, {{end}}{{.Name}} : {{template "type" dict "Type" .Type "Optional" .Optional "TypeMap" $typeMap}}{{ end }} } -> msg)
{{- end }} -> Cmd msg
{{$service.Name | camelCase}}{{$method.Name}}
{{- if $method.Inputs }}
    {{- range $i, $_ := $method.Inputs }} {{.Name}}{{ end }}
{{- end }} toMsg =
    let
        encoder : Encode.Value
        encoder =
            {{- if $method.Inputs}}
            Encode.object
                [ {{ range $i, $_ := $method.Inputs }}
                {{- if gt $i 0 }}, {{ end -}}
                ("{{- .Name -}}", {{ template "encoder" dict "Type" .Type "TypeMap" $typeMap "Optional" .Optional }})
                {{ end }}]
            {{- else }}
            Encode.object []
            {{- end }}

        {{- if eq (len $method.Outputs) 0 }}

        decoder : Decoder ()
        decoder = 
            Decode.succeed ()
            
        {{- else if eq (len $method.Outputs) 1 }}
        {{- $output := index $method.Outputs 0 }}
        

        decoder : Decoder {{template "type" dict "Type" $output.Type "Optional" $output.Optional "TypeMap" $typeMap "Nested" true}}
        decoder =
            {{ if $output.Optional }}decodeOptionalField{{- else -}}Decode.field{{- end }} "{{- $output.Name -}}" {{ template "decoder" dict "Type" $output.Type "TypeMap" $typeMap}}
        
        {{- else if gt (len $method.Outputs) 1 }}
        

        decoder : Decoder { {{range $i, $_ := $method.Outputs}}{{if gt $i 0}}, {{end}}{{.Name}} : {{template "type" dict "Type" .Type "Optional" .Optional "TypeMap" $typeMap}}{{end}} }    
        decoder =
            Decode.succeed response
                {{- range $method.Outputs }}
                |> andMap ({{ if .Optional }}decodeOptionalField{{ else }}Decode.field{{ end }} "{{.Name}}" {{ template "decoder" dict "Type" .Type "TypeMap" $typeMap}})
                {{- end }}  


        response : {{range $method.Outputs}}{{template "type" dict "Type" .Type "Optional" .Optional "TypeMap" $typeMap}} -> {{end}}{ {{ range $i, $_ := $method.Outputs}}{{if gt $i 0}}, {{end}}{{.Name}} : {{template "type" dict "Type" .Type "Optional" .Optional "TypeMap" $typeMap}}{{end}} }
        response {{range $method.Outputs}}{{.Name}} {{end}}=
            { {{ range $i, $_ := $method.Outputs}}{{if gt $i 0}}, {{end}}{{.Name}} = {{.Name}}{{end}} }
        {{- end }}
    in
    Http.post 
        { url: "/rpc/{{- $service.Name -}}/{{- $method.Name -}}"
        , body = Http.jsonBody encoder 
        , expect = Http.expectJson toMsg decoder
        }
    

{{ end }}

{{- end -}}
{{- end -}}
{{- end -}}