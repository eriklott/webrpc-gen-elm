{{- define "helpers" -}}


-- HELPERS


andMap : Decoder a -> Decoder (a -> b) -> Decoder b
andMap =
    Decode.map2 (|>)


decodeOptionalField : String -> Decoder a -> Decoder (Maybe a)
decodeOptionalField fieldName decoder =
    let
        finishDecoding json =
            case Decode.decodeValue (Decode.field fieldName Decode.value) json of
                Ok _ ->
                    Decode.map Just (Decode.field fieldName decoder)

                Err _ ->
                    Decode.succeed Nothing
    in
    Decode.oneOf
        [ Decode.field fieldName (Decode.null Nothing)
        , Decode.value |> Decode.andThen finishDecoding
        ]


decodeDict : (String -> Maybe comparable) -> Decoder v -> Decoder (Dict comparable v)
decodeDict toKey valDecoder =
    Decode.keyValuePairs valDecoder
        |> Decode.andThen (decodeDictFromTuples toKey)


decodeDictFromTuples : (String -> Maybe comparable) -> List ( String, v ) -> Decoder (Dict comparable v)
decodeDictFromTuples toKey tuples =
    case tuples of
        [] ->
            Decode.succeed Dict.empty

        ( strKey, value ) :: rest ->
            case toKey strKey of
                Just key ->
                    decodeDictFromTuples toKey rest
                        |> Decode.andThen (Dict.insert key value >> Decode.succeed)

                Nothing ->
                    Decode.fail ("failed to decode key: " ++ strKey)  


encodeMaybe : (a -> Encode.Value) -> Maybe a -> Encode.Value
encodeMaybe encoder =
    Maybe.map encoder >> Maybe.withDefault Encode.null
    
    
expectJson : (Result Error a -> msg) -> Decoder a -> Http.Expect msg
expectJson toMsg decoder =
    Http.expectStringResponse 
        toMsg 
        (\response ->
            case response of
                Http.BadUrl_ url ->
                    Err (BadUrl url)

                Http.Timeout_ ->
                    Err Timeout

                Http.NetworkError_ ->
                    Err NetworkError

                Http.BadStatus_ metadata body ->
                    let
                        contentType =
                            metadata.headers
                                |> Dict.get "content-type"
                                |> Maybe.withDefault ""
                    in
                    if String.contains "application/json" contentType then
                        case Decode.decodeString webrpcErrorDecoder body of
                            Ok webrpcError ->
                                Err webrpcError

                            Err err ->
                                Err (BadBody (Decode.errorToString err))
                    else
                        Err (BadStatus metadata.statusCode)

                Http.GoodStatus_ _ body ->
                    case Decode.decodeString decoder body of
                        Ok value ->
                            Ok value

                        Err err ->
                            Err (BadBody (Decode.errorToString err))
        )


jsonResolver : Decoder a -> Http.Resolver Error a
jsonResolver decoder =
    Http.stringResolver
        (\ response ->
            case response of
                Http.BadUrl_ url ->
                    Err (BadUrl url)

                Http.Timeout_ ->
                    Err Timeout

                Http.NetworkError_ ->
                    Err NetworkError

                Http.BadStatus_ metadata body ->
                    let
                        contentType =
                            metadata.headers
                                |> Dict.get "content-type"
                                |> Maybe.withDefault ""
                    in
                    if String.contains "application/json" contentType then
                        case Decode.decodeString webrpcErrorDecoder body of
                            Ok webrpcError ->
                                Err webrpcError

                            Err err ->
                                Err (BadBody (Decode.errorToString err))
                    else
                        Err (BadStatus metadata.statusCode)

                Http.GoodStatus_ _ body ->
                    case Decode.decodeString decoder body of
                        Ok value ->
                            Ok value

                        Err err ->
                            Err (BadBody (Decode.errorToString err))
        )


dictStringKey : String -> Maybe String
dictStringKey =
    Just


dictIntKey : String -> Maybe Int
dictIntKey =
    String.toInt


{{- end -}}