{{- define "helpers" -}}


-- HELPERS


andMap : Decoder a -> Decoder (a -> b) -> Decoder b
andMap =
    Decode.map2 (|>)


decodeOptionalField : String -> Decoder a -> Decoder (Maybe a)
decodeOptionalField fieldName decoder =
    let
        finishDecoding json =
            case Decode.decodeValue (Decode.field fieldName Decode.value) json of
                Ok val ->
                    Decode.map Just (Decode.field fieldName decoder)

                Err _ ->
                    Decode.succeed Nothing
    in
    Decode.oneOf
        [ Decode.field fieldName (Decode.null Nothing)
        , Decode.value |> Decode.andThen finishDecoding
        ]


decodeDict : Decoder comparable -> Decoder v -> Decoder (Dict comparable v)
decodeDict keyDecoder valDecoder =
    Decode.keyValuePairs valDecoder
        |> Decode.andThen (decodeDictFromTuples keyDecoder)


decodeDictFromTuples : Decoder comparable -> List ( String, v ) -> Decoder (Dict comparable v)
decodeDictFromTuples keyDecoder tuples =
    case tuples of
        [] ->
            Decode.succeed Dict.empty

        ( strKey, value ) :: rest ->
            case Decode.decodeString keyDecoder strKey of
                Ok key ->
                    decodeDictFromTuples keyDecoder rest
                        |> Decode.andThen (Dict.insert key value >> Decode.succeed)

                Err error ->
                    Decode.fail (Decode.errorToString error)    


encodeMaybe : (a -> Encode.Value) -> Maybe a -> Encode.Value
encodeMaybe encoder =
    Maybe.map encoder >> Maybe.withDefault Encode.null
    
    
{{- end -}}