{{- define "value" -}}


-- Value


type Value
    = ObjectValue (List ( String, Value ))
    | ArrayValue (List Value)
    | BoolValue Bool
    | NullValue
    | NumericValue Float
    | StringValue String


valueDecoder : Decoder Value
valueDecoder =
    let
        objectValueDecoder =
            Decode.keyValuePairs (Decode.lazy (\_ -> valueDecoder))
                |> Decode.map ObjectValue

        arrayValueDecoder =
            Decode.list (Decode.lazy (\_ -> valueDecoder))
                |> Decode.map ArrayValue
    in
    Decode.oneOf
        [ objectValueDecoder
        , arrayValueDecoder
        , Decode.null NullValue
        , Decode.string |> Decode.map StringValue
        , Decode.float |> Decode.map NumericValue
        , Decode.bool |> Decode.map BoolValue
        ]


valueEncoder : Value -> Encode.Value
valueEncoder value =
    case value of
        ObjectValue pairs ->
            pairs
                |> List.map (\( k, v ) -> ( k, valueEncoder v ))
                |> Encode.object

        ArrayValue values ->
            Encode.list valueEncoder values
            
        BoolValue bool ->
            Encode.bool bool

        NullValue ->
            Encode.null

        NumericValue float ->
            Encode.float float

        StringValue string ->
            Encode.string string


{{ end }}